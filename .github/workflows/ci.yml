name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
      - release-*
    types:
      - opened
      - reopened
      - synchronize
  schedule:
    - cron:  '0 4 * * *'

defaults:
  run:
    shell: bash

env:
  HELM_CHART_DIR: deployments/helm-chart
  GIT_NAME: NGINX Kubernetes Team
  GIT_MAIL: kubernetes@nginx.com

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:

  checks:
    name: Checks and variables
    runs-on: ubuntu-22.04
    outputs:
      go_path: ${{ steps.go.outputs.go_path }}
      k8s_latest: ${{ steps.vars.outputs.k8s_latest }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
      - name: Output Variables
        id: vars
        run: |
          echo "k8s_latest=$(grep -m1 'FROM kindest/node' <tests/docker/Dockerfile | awk -F'[:v]' '{print $3}')" >> $GITHUB_OUTPUT
      - name: Setup Golang Environment
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version-file: go.mod
          cache: true
      - name: Determine GOPATH
        id: go
        run: echo "go_path=$(go env GOPATH)" >> $GITHUB_OUTPUT
      - name: Check if go.mod and go.sum are up to date
        run: |
          go mod tidy && git diff --exit-code -- go.mod go.sum
      - name: Check if CRDs changed
        run: |
          make update-crds && git diff --name-only --exit-code deployments/common/crds* deployments/helm-chart/crds*
      - name: Check if Codegen changed
        run: |
          cd ../.. && mkdir -p github.com/nginxinc && mv kubernetes-ingress/kubernetes-ingress github.com/nginxinc/ && cd github.com/nginxinc/kubernetes-ingress
          make update-codegen && git diff --name-only --exit-code pkg/**
          cd ../../.. && mv github.com/nginxinc/kubernetes-ingress kubernetes-ingress/kubernetes-ingress

  binary:
    name: Build binary
    runs-on: ubuntu-22.04
    needs: checks
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
        with:
          fetch-depth: 0
      - name: Setup Golang Environment
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version-file: go.mod
          cache: true
      - name: Build binary
        uses: goreleaser/goreleaser-action@8f67e590f2d095516493f017008adc464e63adb1 # v4.1.0
        with:
          version: latest
          args: build --snapshot --rm-dist --single-target --id kubernetes-ingress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.checks.outputs.go_path }}

      - name: Store Artifacts in Cache
        uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d # v3.2.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-single

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-22.04
    needs: checks
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
      - name: Setup Golang Environment
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version-file: go.mod
          cache: true
      - name: Run Tests
        run: make cover
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70 # v3.1.1
        with:
          files: ./coverage.txt

  helm-tests:
    name: Helm Tests
    runs-on: ubuntu-22.04
    needs: [binary, unit-tests, checks]
    strategy:
      matrix:
        include:
         - image: debian
           type: oss
         - image: debian-plus
           type: plus
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
      - name: Fetch Cached Artifacts
        uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d # v3.2.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-single
      - name: Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # v2.2.1
      - name: Build Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # v3.2.0
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,scope=${{ matrix.image }},mode=max
          target: goreleaser
          tags: ${{ matrix.type }}:${{ github.sha }}
          pull: true
          load: true
          build-args: |
            BUILD_OS=${{ matrix.image }}
            IC_VERSION=CI
          secrets: |
            ${{ contains(matrix.type, 'plus') && format('"nginx-repo.crt={0}"', secrets.NGINX_CRT) || '' }}
            ${{ contains(matrix.type, 'plus') && format('"nginx-repo.key={0}"', secrets.NGINX_KEY) || '' }}
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --image=kindest/node:v${{ needs.checks.outputs.k8s_latest }} --wait 75s
          kind load docker-image ${{ matrix.type }}:${{ github.sha }} --name ${{ github.run_id }}
      - name: Install Chart
        run: >
          helm install
          ${{ matrix.type }}
          .
          --set controller.image.repository=${{ matrix.type }}
          --set controller.image.tag=${{ github.sha }}
          --set controller.service.type=NodePort
          --set controller.nginxplus=${{ contains(matrix.type, 'plus') && 'true' || 'false' }}
          --wait
        working-directory: ${{ github.workspace }}/deployments/helm-chart
      - name: Expose Test Ingresses
        run: |
          kubectl port-forward service/${{ matrix.type }}-nginx-ingress 8080:80 &
          kubectl port-forward service/${{ matrix.type }}-nginx-ingress 8443:443 &
      - name: Test HTTP
        run: |
          counter=0
          max_attempts=5
          until [ $(curl --write-out %{http_code} -s --output /dev/null http://localhost:8080) -eq 404 ]; do
            if [ ${counter} -eq ${max_attempts} ]; then
              exit 1
            fi
            printf '.'; counter=$(($counter+1)); sleep 5;
          done
      - name: Test HTTPS
        run: |
          counter=0
          max_attempts=5
          until [ $(curl --write-out %{http_code} -ks --output /dev/null https://localhost:8443) -eq 404 ]; do
            if [ ${counter} -eq ${max_attempts} ]; then
              exit 1
            fi
            printf '.'; counter=$(($counter+1)); sleep 5;
          done

  setup-matrix:
    name: Setup Matrix for Smoke Tests
    runs-on: ubuntu-22.04
    needs: [checks, unit-tests]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" != "schedule" ]; then
            echo "matrix={\"images\": \
                                                [{\"image\": \"debian\", \"marker\": \"ingresses\"}, \
                                                {\"image\": \"alpine\", \"marker\":\"vsr\"}, \
                                                {\"image\": \"alpine\", \"marker\":\"policies\"}, \
                                                {\"image\": \"debian\", \"marker\": \"vs\"}, \
                                                {\"image\": \"ubi\", \"marker\": \"ts\"}, \
                                                {\"image\": \"debian-plus\", \"marker\": \"vs\"}, \
                                                {\"image\": \"debian-plus\", \"marker\": \"ts\"}, \
                                                {\"image\": \"alpine-plus\", \"marker\":\"ingresses\"}, \
                                                {\"image\": \"alpine-plus\", \"marker\": \"vsr\"}, \
                                                {\"image\": \"ubi-plus\", \"marker\": \"policies\"}, \
                                                {\"image\": \"debian-plus-nap\", \"marker\": \"dos\"}, \
                                                {\"image\": \"debian-plus-nap\", \"marker\": \"appprotect\"}], \
                                              \"k8s\": [\"${{ needs.checks.outputs.k8s_latest }}\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"k8s\": [\"1.21.14\", \"1.22.15\", \"1.23.13\", \"1.24.7\", \"1.25.3\", \"${{ needs.checks.outputs.k8s_latest }}\"], \
                                             \"images\": [{\"image\": \"debian\"}, {\"image\": \"debian-plus\"}]}" >> $GITHUB_OUTPUT
          fi

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-22.04
    needs: setup-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup-matrix.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
      - name: Run Smoke Tests
        id: smoke-tests
        uses: ./.github/actions/smoke-tests
        with:
          image: ${{ matrix.images.image != '' && matrix.images.image || 'debian' }}
          marker: ${{ matrix.images.marker != '' && matrix.images.marker || '' }}
          k8s-version: ${{ matrix.k8s }}
          nginx-crt: ${{ contains(matrix.images.image, 'nap') && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}
          nginx-key: ${{ contains(matrix.images.image, 'nap') && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}
      - name: Upload Test Results
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # v3.1.1
        with:
          name: ${{ steps.smoke-tests.outputs.test-results-name }}
          path: ${{ github.workspace }}/tests/${{ steps.smoke-tests.outputs.test-results-name }}.html
        if: always()

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-22.04
    needs: [checks, smoke-tests, helm-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
        with:
          fetch-depth: 0
      - name: Setup Golang Environment
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version-file: go.mod
          cache: true

      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
      - run: npm install js-yaml
        continue-on-error: true
        if: startsWith(github.ref, 'refs/tags/')
      - name: Publish release on tag
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # v6.3.3
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
              const ref = context.ref.split("/")[2]
              const yaml = require('js-yaml');

              const releases = (await github.rest.repos.listReleases({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                per_page: 100,
              })).data

              const draft_release = releases.find(release => release.draft && release.tag_name === ref)

              const helm_file = (await github.rest.repos.getContent({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                path: "deployments/helm-chart/Chart.yaml",
                ref: ref,
              })).data.content

              const helm_yaml = yaml.load(Buffer.from(helm_file, 'base64').toString())
              const helm_version = helm_yaml.version
              console.log(`Helm version: ${helm_version}`)

              const update = await github.rest.repos.updateRelease({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                release_id: draft_release.id,
                body: draft_release.body.replace("%HELM_CHART_VERSION%", helm_version),
                draft: false
              });
              console.log(`Release published: ${update.data.html_url}`)
              console.log(`Release notes: ${update.data.body}`)
        if: startsWith(github.ref, 'refs/tags/')

      - name: Download Syft
        uses: anchore/sbom-action/download-syft@06e109483e6aa305a2b2395eabae554e51530e1d # v0.13.1

      - name: Build binaries
        uses: goreleaser/goreleaser-action@8f67e590f2d095516493f017008adc464e63adb1 # v4.1.0
        with:
          version: latest
          args: ${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'build --snapshot' }} ${{ github.event_name == 'pull_request' && '--single-target' || '' }} --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.checks.outputs.go_path }}
          AWS_PRODUCT_CODE: ${{ secrets.AWS_PRODUCT_CODE }}
          AWS_PUB_KEY: ${{ secrets.AWS_PUB_KEY }}
          AWS_NAP_DOS_PRODUCT_CODE: ${{ secrets.AWS_NAP_DOS_PRODUCT_CODE }}
          AWS_NAP_DOS_PUB_KEY: ${{ secrets.AWS_NAP_DOS_PUB_KEY }}
          AWS_NAP_WAF_PRODUCT_CODE: ${{ secrets.AWS_NAP_WAF_PRODUCT_CODE }}
          AWS_NAP_WAF_PUB_KEY: ${{ secrets.AWS_NAP_WAF_PUB_KEY }}
          AWS_NAP_WAF_DOS_PRODUCT_CODE: ${{ secrets.AWS_NAP_WAF_DOS_PRODUCT_CODE }}
          AWS_NAP_WAF_DOS_PUB_KEY: ${{ secrets.AWS_NAP_WAF_DOS_PUB_KEY }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_COMMUNITY }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_BUCKET_NAME: ${{ secrets.AZURE_BUCKET_NAME }}

      - name: Store Artifacts in Cache
        uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d # v3.2.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-multi

  build-docker:
    name: Build Docker OSS
    needs: build-binaries
    strategy:
        fail-fast: false
        matrix:
          image: [debian, alpine]
          platforms: ["linux/arm, linux/arm64, linux/amd64, linux/ppc64le, linux/s390x"]
          include:
            - image: ubi
              platforms: "linux/arm64, linux/amd64, linux/ppc64le, linux/s390x"
    uses: ./.github/workflows/build-oss.yml
    with:
      platforms: ${{ matrix.platforms }}
      image: ${{ matrix.image }}
    secrets: inherit

  build-docker-plus:
    name: Build Docker Plus
    needs: build-binaries
    strategy:
        fail-fast: false
        matrix:
          image: [debian-plus, alpine-plus]
          platforms: ["linux/arm64, linux/amd64"]
          target: [goreleaser, aws]
          include:
            - image: ubi-plus
              platforms: "linux/arm64, linux/amd64, linux/s390x"
              target: goreleaser
    uses: ./.github/workflows/build-plus.yml
    with:
      platforms: ${{ matrix.platforms }}
      image: ${{ matrix.image }}
      target: ${{ matrix.target }}
    secrets: inherit

  build-docker-nap:
    name: Build Docker NAP
    needs: build-binaries
    strategy:
        fail-fast: false
        matrix:
          image: [debian-plus-nap, ubi-plus-nap]
          platforms: ["linux/amd64"]
          target: [goreleaser, aws]
          nap_modules: [dos, waf, "waf,dos"]
    uses: ./.github/workflows/build-plus.yml
    with:
      platforms: ${{ matrix.platforms }}
      image: ${{ matrix.image }}
      target: ${{ matrix.target }}
      nap_modules: ${{ matrix.nap_modules }}
    secrets: inherit

  package-helm:
    name: Package Helm Chart
    runs-on: ubuntu-22.04
    needs: build-docker
    outputs:
      version: ${{ steps.var.outputs.helm_version }}
      type: ${{ steps.var.outputs.helm_type }}
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
      - name: Output Variables
        id: var
        run: |
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              helm_version="$(helm show chart ${{ env.HELM_CHART_DIR }} | grep 'version:' | cut -d ' ' -f 2)"
              helm_type="stable"
          else
              helm_version="0.0.0-edge"
              helm_type="edge"
          fi
          echo "helm_version=$helm_version" >> $GITHUB_OUTPUT
          echo "helm_type=$helm_type" >> $GITHUB_OUTPUT
      - name: Lint
        run: helm lint ${{ env.HELM_CHART_DIR }}
      - name: Package
        run: helm package --version ${{ steps.var.outputs.helm_version }} ${{ env.HELM_CHART_DIR }}
      - name: Upload Chart
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # v3.1.1
        with:
          name: helm-chart
          path: ${{ github.workspace }}/nginx-ingress-${{ steps.var.outputs.helm_version }}.tgz

  release-helm:
    name: Release Helm Chart
    runs-on: ubuntu-22.04
    needs: package-helm
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
        with:
          repository: nginxinc/helm-charts
          fetch-depth: 1
          token: ${{ secrets.NGINX_PAT }}
      - name: Remove previous Chart
        run: rm -f ${{ github.workspace }}/${{ needs.package-helm.outputs.type }}/nginx-ingress-${{ needs.package-helm.outputs.version }}.tgz
      - name: Retrieve latest Helm Chart
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # v3.0.1
        with:
          name: helm-chart
          path: ${{ github.workspace }}/${{ needs.package-helm.outputs.type }}
      - name: Push Helm Chart
        run: |
          helm repo index ${{ needs.package-helm.outputs.type }} --url https://helm.nginx.com/${{ needs.package-helm.outputs.type }}
          git add -A
          git -c user.name='${{ env.GIT_NAME }}' -c user.email='${{ env.GIT_MAIL }}' \
          commit -m "NGINX Ingress Controller - Release ${{ needs.package-helm.outputs.type }} ${{ needs.package-helm.outputs.version }}"
          git push -u origin master
